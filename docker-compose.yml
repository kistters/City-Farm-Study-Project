version: '3'
services:

  web-nginx:
    image: nginx:1.13.8
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.city-farm.conf:/etc/nginx/conf.d/default.conf
      - ./frontend:/frontend
      - .data/django:/django # mapping django collectstatic output
      - .data/nginx:/var/log/nginx/
    depends_on:
      - backend-django
    networks:
      - compose-network

  backend-django:
    build:
      context: backend-django
      target: production
#    command: ["daphne", "-b", "0.0.0.0", "-p", "8080", "config.asgi:application"]
    ports:
      - "8000:8080"
    env_file:
      - .env.backend-django
    volumes:
      - ./backend-django:/app
      - .data/django:/assets
    networks:
      - compose-network
    depends_on:
      postgres-resource:
        condition: service_healthy
      redis-resource:
        condition: service_healthy

  postgres-resource:
    image: postgres:16-alpine
    command: ["postgres", "-c", "log_statement=all", "-c", "logging_collector=on"]
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "secret"
      POSTGRES_DB: "city_farm"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5333:5432"
    volumes:
      - .data/postgres:/var/lib/postgresql/data/log
      - postgres-data:/var/lib/postgresql/data
    networks:
      - compose-network

  redis-resource:
    image: redis:7-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6333:6379"
    networks:
      - compose-network

volumes:
  postgres-data:
    external: true
    name: "city-farm-data"

networks:
  compose-network:
    driver: bridge
